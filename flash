#!/usr/bin/perl
#
# execute or compile or flash code, locally, using particle, or platformio
#
# used in vim with ctrl+k/ctrl+l:
# nnoremap <C-k> :w \| !flash -c %p<CR>
# nnoremap <C-l> :w \| !flash %p<CR>
#
# -samy kamkar 2020/06/20

#use Data::Dumper;
#open F,">/tmp/dump";print F Dumper(\@ARGV) .$/;print F Dumper(\%ENV); close(F);

use y;;;
use strict;
my $PKG = "package.json";

my $compile = $ARGV[0] eq "-c" && shift;
my $pio = map { -e $_ || -e "../$_" } "platformio.ini"; # true if we are working with pio
my $npm = -e $PKG && json($PKG)->{scripts}{start};
my $SBUILD = "samybuild";
my $sbuild = -e $SBUILD;
my $name = shift || "desk" || "p"; # particle board name or file name
my $file = file($name);
my $py = $file =~ /^Python/;
my $pl = $file =~ /^Perl/;
my ($ext) = ($name =~ /\.(\w+)$/);
my $board = shift || "photon";

my $PARTICLE = "particle";
my $PLATFORMIO = "platformio";
my $CC = "gcc";

# if samybuild file exists
if ($sbuild)
{
  system($compile ? ("perl", $SBUILD, "-r") : ("perl", $SBUILD));
}

# npm start
elsif ($npm)
{
  system(qw/npm start/);
}

# pl/pm file
elsif ($pl || $ext eq "pl" || $ext eq "pm")
{
  my @args = s4args($name);
  system("perl", $name, @args);
}

# js file
elsif ($ext eq "js")
{
  my @args = s4args($name);
  system("node", $name, @args);
}

# py file
elsif ($py || $ext eq "py")
{
  my $env = first cat($name);
  my @args = s4args($name);
  system($env =~ /^#!env\s+(\S+)/ ? $1 : "python", $name);
}

# c/cpp file
elsif ($ext eq "c" || $ext eq "cpp")
{
  my $code = code($name);

  # particle/arduino code
  $code =~ /void\s+setup\s*\(/ ? particle() : c();
}

# platformio
elsif ($pio)
{
  my @opts = -e "../platformio.ini" ? ("-d", "..") : ();
  system($compile ? ($PLATFORMIO, qw/run -v/, @opts) : ($PLATFORMIO, qw/run -v --target upload/, @opts));
}

# assuming particle
else
{
  particle();
}

sub c
{
  system($CC, $name, "-o", "$name.bin");
  system($name =~ m|^/| ? "$name.bin" : "./$name.bin");
}

sub particle
{
  # dfu over usb
  if ($name eq "usb")
  {
    my $out = `$PARTICLE compile $board`;
    print $out;
    if ($out =~ /saved firmware to: (\S+)/i)
    {
      system($PARTICLE, qw/flash --usb/, $1);
    }
  }

  # flash over network
  else
  {
    system($compile ? ($PARTICLE, qw/-v compile/, $board) : ($PARTICLE, qw/-v flash/, $name));
  }
}

sub code
{
  my $code = cat($name);
  # remove comments
  $code =~ s~/\*.*?\*\/~~g;
  $code =~ s~//.*?\n~~g;
  return $code;
}