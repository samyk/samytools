#!/usr/bin/perl

# run a command every X seconds when a file/dir changes
# -samy kamkar
#
# eg: onchange [-s(ize)] project/ rsync -av project/ remote.com:proj

use strict;
use y;;;
my ($secs, $size, $files, $commands) = usage();

my $stat = $size ? 7 : 9; # size vs mtime
my @files = @{$files};
my @commands = @{$commands};

my (%last, %mtime);
while (1)
{
	my $change;
	foreach my $file (@files)
	{
		($mtime{$file}) = (stat($file))[$stat];
		if ($last{$file} != $mtime{$file})
		{
			$change++;
			$last{$file} = $mtime{$file};
		}
	}

	if ($change)
	{
		print "\$ @commands\n";
		system(@commands);
	}
	select(undef, undef, undef, $secs);
}

sub usage
{
	$|++;

	my $size;
	if ($ARGV[0] eq "-s")
	{
		$size = shift(@ARGV);
	}

	my $secs = 0.1;
	if ($ARGV[0] =~ /^(\d+(\.\d*)?|\.\d+)$/)
	{
		$secs = shift(@ARGV);
	}

	my (@files, @commands, $i);
	# find our files to monitor, though if we pass a ./executable then consider that the first command to run
	while (@ARGV)
	{
		my $arg = shift(@ARGV);

		# file (file is the cmd)
		# file args (file is the cmd)
		# file cmd
		# file cmd args
		# file -- cmd args
		if ($arg eq "--")
		{
			last;
		}
		# if file exists
		elsif (-e $arg || -e which($arg))
		{
			# if there's no more args and this is executable, then consider it the command
			if ((-x $arg || -x which($arg)) && !-e $ARGV[0] && !-e which($ARGV[0]))
			{
				@commands = $arg =~ m~^[./]~ ? $arg : "./$arg";
				last;
			}
			else
			{
				push(@files, find($arg));
			}
		}
		else
		{
			# add to our command
			@commands = $arg;
			last;
		}
	}

	#push(@files, find(shift(@ARGV))) while -e $ARGV[0] && !($ARGV[0] =~ m~^\./~ && -x $ARGV[0]);

	# allow -- to split between files vs exec manually
	#shift(@ARGV) if $ARGV[0] eq "--";
	
	# if there are no files, our command is it
	@files = @commands if !@files;
	push @commands, @ARGV;

	if (!@files || !@commands)
	{
		die "usage: $0 [secs] [files/dirs] [--] [command to run on change]\n";
	}

	return ($secs, $size, \@files, \@commands);
}

sub find
{
	my @files = @_;
	foreach my $path (@_)
	{
		if (-d $path)
		{
			opendir(DIR, $path);
			map { push @files, find("$path/$_") } grep { !/^\.\.?$/ } readdir(DIR);
			closedir(DIR);
		}
	}
	return @files;
}
