#!/usr/bin/perl
#
# unpacks all file supporting recursive unpacking
# -samy kamkar 2020/11/01
#
# TODO:
#  - instead of ignoring files we already see, don't ignore files if their lastmod time changes (eg we unpacked pre-existing files)
#  - ignore files should recurse

use strict;
use Cwd;

die "usage: $0 [-v | -r] <files / paths ...>\n" unless @ARGV;
my $verbose = $ARGV[0] eq "-v" ? shift : 0;
my $recurse = $ARGV[0] eq "-r" ? shift : 0;

my %formats = (
  "ar"      => "ar -x FILE",
  "asar"    => "asar extract FILE .",
  "bzip2"   => "bzip2 -vd FILE",
  "tar"     => "tar -xvf FILE",
  "cpio"    => "cpio -idv -F FILE",
  "xar"     => "xar -xv -f FILE",
  "gzip"    => "zcat -v FILE > FILE.unp",
  "7-zip"   => "7z x FILE",
  "lzma"    => "7z x FILE",
  "xz"      => "xz -vd FILE",
  "dtb"     => \&dtb, # ports/brew dtc # "dtc -I dtb -O dts FILE -o FILE.dts", # ports/brew dtc
  "ramdisk" => "dumpimage -T ramdisk -o FILE.unp FILE", # brew uboot-tools (ports is broken)
  "zip"     => "unzip FILE",
  "Z"       => "uncompress -c FILE > FILE.unp",
  "zstd"    => "zstd -d FILE",

  # linux version of dumpimage
  #"ramdisk" => "dumpimage -i FILE -T ramdisk FILE.unp",

  # untested
  "elf"     => "echo install binutils && echo readelf -a FILE",
  "exe"     => "objdump -x FILE",
  "macho"   => "macho_dump FILE",
);

my %types = (
  "^Device Tree Blob"          => "dtb",

  "^ASCII cpio archive"        => "cpio",
  "^POSIX tar archive"         => "tar",
  "^current ar archive"        => "ar",

  "^Zip archive data"          => "zip",
  "^RAR archive data"          => "rar",
  "^7-zip archive data"        => "7-zip",

  "^compress'd data"           => "Z",
  "^Zstandard compressed data" => "zstd",

  "^bzip2 compressed data"     => "bzip2",
  "^gzip compressed data"      => "gzip",
  "^LZMA compressed data"      => "lzma",
  "^XZ compressed data"        => "xz",
);

# extensions to formats
# formats are already considered extensions, eg .asar is already considered asar but can be overridden here
my %exts = (
  "a"    => "ar",
  "7z"   => "7-zip",
  "gz"   => "gzip",
  "tgz"  => "gzip",
  "bz2"  => "bzip2",
  "pkg"  => "xar",
  "pax"  => "cpio",
  "zst"  => "zstd",
);

# this helps us ensure we're only looking at longer formats first - for example, match "7-zip" before "zip"
# alternatively, be verbose in %formats to prevent mismatches
my @formats = sort { length($b) <=> length($a) } keys %formats;

# files we still want to scan, use hash for speed
my %scan = map { $_ => 1 } @ARGV;
# let's skip the files that already exist in this dir
my %skip = map { $_ => 1 } grep { !$scan{$_} } <*>;

# traverse the files/dirs we passed in
find(@ARGV);
exit;

####

sub find
{
  foreach my $file (@_)
  {
    # skip specific paths
    next if $skip{$file};

    # skip pre-existing files
    debug("searching $file");
    my $shfile = shquote($file);
    -d $file ? ($recurse && find(<$shfile/*>)) : explode($file);
  }
}

sub dtb
{
  my $file = shift;
  my $shfile = shquote($file);
  unp_run("dtc -I dtb -O dts FILE -o FILE.dts", $shfile);

  my %dt;
  my $ref = \%dt;
  open(F, "<$file.dts") || die "can't read $file.dts: $!";
  while (<F>)
  {
    if (/^\s*([^\s\{]+)\s*\{/)
    {
      $ref->{$1}{_parent} = $ref;
      $ref = $ref->{$1};
    }
    elsif (/^\s*([^\s]+)\s*=\s*(.+);/)
    {
      my ($k, $v) = ($1, $2);
      $v =~ s/^"(.*)"$/$1/ || $v =~ s/^<0x(\w+)>$/hex($1)/e;
      $ref->{$k} = $v;
    }
    elsif (/^\s*([\w-,]+)\s*;/)
    {
      $ref->{$1} = "";
    }
    elsif (/^\s*\};/)
    {
      $ref = $ref->{_parent};
    }
    elsif (m~^\s*$|^/(dts-v1|memreserve)/~) { }
    else { print "dtb unknown: $_" }
    # ?
    #if (/^\s*data = <(.+)>;/)
    #{
    #  my $data = $1;
    #  $data =~ s/\s+//g;
    #  $data =~ s/([0-9a-f]{2})/0x$1,/g;
    #  $data =~ s/,$//;
    #  print "echo -n '$data' | xxd -r -p > $file\n";
    #  last;
    #}
  }

  foreach my $key (keys %{$dt{'/'}{images}})
  {
    my $r = $dt{'/'}{images}{$key};
    next unless ref($r) eq "HASH";
    if ($r->{"data-size"} && $r->{"data-position"})
    {
      my $cmd = "dd if=$file of=$file.$key.img bs=1 skip=$r->{'data-position'} count=$r->{'data-size'}";
      unp_run($cmd);
    }
  }
  use Data::Dumper;
  #  print Dumper(\%dt);
}

sub explode
{
  foreach my $file (@_)
  {
    # skip files if we've already unpacked them
    next if $skip{$file}++;

    my $shfile = shquote($file);

    chomp(my $type = `file $shfile`);
    (undef, $type) = split(/:\s+/, $type, 2);
    print STDERR "< $file: $type\n";

    my $unpack = type($type, $file);
    debug("searching $file ($type)");

    # code
    if (ref($unpack))
    {
      $unpack->($file);

      # rescan unpacked files
      find(<*>) if $recurse;
    }

    # command
    elsif ($unpack)
    {
      unp_run($unpack, $shfile);
      ## quote the file in case it has spaces/quotes
      #$unpack =~ s/FILE/$shfile/g;
      #print "> $unpack\n";
      #system($unpack);

      # rescan unpacked files
      find(<*>) if $recurse;
    }
  }
}

sub unp_run
{
  my ($unpack, $shfile) = @_;

  # quote the file in case it has spaces/quotes
  $unpack =~ s/FILE/$shfile/g;
  print "> $unpack\n";
  system($unpack);
}

sub type
{
  my ($type, $file) = @_;

  # check `file` type in %types
  foreach my $format (keys %types)
  {
    return $formats{$types{$format}} if $type =~ /$format/i;
  }

  # then check the file extension
  return $formats{$exts{$1} || $1} if $file =~ /\.([^.]+)$/ && $formats{$exts{$1} || $1};

  # need to see if these will work
  foreach my $format (keys %formats)
  {
    return $formats{$format} if $type =~ /$format/i;
  }

  die "unknown type: $type\n";
}

sub debug
{
  print "$_[0]\n" if $verbose;
}

# quote file for shell
sub shquote
{
  (my $shfile = $_[0]) =~ s/'/'\\''/g;
  return "'$shfile'";
}

__DATA__
ramdisk => u-boot legacy uImage, , Linux/ARM 64-bit, RAMDisk Image (gzip), 1157194 bytes, Wed Nov 29 07:49:03 2023, Load Address: 0x00000000, Entry Point: 0x00000000, Header CRC: 0x4CB0B58F, Data CRC: 0x30EB577E
