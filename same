#!/usr/bin/perl

# look for files that are identical (quickly)
# -samy kamkar

use strict;
use File::Find;
use y;;;

die "finds files that are identical (quickly)\nby samy kamkar
usage: $0 [-R (REMOVES ALL BUT FIRST ONE)] [-e match-regexp] [-v ignore-regexp] <dir> [...]\n" unless @ARGV;
my ($match, $ignore, $rm);
if ($ARGV[0] eq "-R")
{
	shift;
	$rm = 1;
}
if ($ARGV[0] eq "-e")
{
	shift;
	$match = shift;
}
if ($ARGV[0] eq "-v")
{
	shift;
	$ignore = shift;
}
my (%files, %md5, %crc);

# find all file sizes
find(\&wanted, @ARGV);

# find sizes where there's more than one file with same size
foreach my $size (grep { @{$files{$_}} > 1 } sort { $a <=> $b } keys %files)
{
	# md5 all files to find same files
	foreach my $file (@{$files{$size}})
	{
		#next if -l $file;
		next if defined($ignore) && $file =~ /$ignore/;
		next if defined($match) && $file !~ /$match/;

		# if big file, crc32 first
		if ($size > 1024*1024)
		{
			my $crc = crc32(f($file));
			push @{$crc{$crc}}, $file;
		}
		else
		{
			my $md5 = md5($file);
			push @{$md5{$md5}}, $file;
		}
	}
}

# more than one file with same crc32
# TODO: show small files that are the same first
foreach my $crc (grep { @{$crc{$_}} > 1 } keys %crc)
{
	foreach my $file (@{$crc{$crc}})
	{
		print "$crc: $file (need to md5)\n";
		my $md5 = md5($file);
		push @{$md5{$md5}}, $file;
	}
}

# more than one file with same md5
foreach my $md5 (grep { @{$md5{$_}} > 1 } keys %md5)
{
  my $f = 1;
	# print all files
	foreach my $file (@{$md5{$md5}})
	{
	  my $didrm = "";
		if (!$f && $rm)
    {
			if ($rm == 1)
			{
				print "$md5: $file\n";
				print "Are you sure you want to remove `$file`? future files will be removed without asking. (y/n) ";
				chomp(my $ans = <STDIN>);
				$rm = 2 if $ans eq "y";
			}
			if ($rm == 2)
			{
				unlink($file);
				$didrm = " (REMOVED)";
			}
    }
    $f = 0;
		print "$md5: $file$didrm";
		if (-l $file) { print " (symlink)" }
		print "\n";
	}
	print "\n";
}

sub wanted
{
	# ignore dirs
	next if -d $_;

	# we're in the dir in File::Find
	my @tmp = stat($_);

	# size
	push @{$files{$tmp[7]}}, $File::Find::name;
}


sub md5
{
	use Digest::MD5;
  my $filename = shift;
	if (open (my $fh, '<', $filename))
	{
   	binmode ($fh);
		return Digest::MD5->new->addfile($fh)->hexdigest;
	}
	else
	{
		print STDERR "Can't read $fh: $!\n";
		return undef;	
	}
}

#sub crc32
#{
#	runs("crc32", @_);
#}
